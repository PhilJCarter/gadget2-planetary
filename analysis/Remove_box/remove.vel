#include <stdio.h>
#include <math.h>
#include <stdlib.h>

#include "globalvars.h"


void bound(struct planet_data *p)
{

  int i;
  double xcm,ycm,zcm;
  double vxcm,vycm,vzcm;
  double mtot=0.0;
  double mbig=0.0, msmall=0.0;
  double vmag;


  xcm=ycm=zcm=0.0;
  vxcm=vycm=vzcm=0.0;
  count=0;

  for(i = 1; i <= p->Ntot; i++)
    {
      if(p->pos[i][1] > xmin && p->pos[i][1] < xmax)
	{
	  if(p->pos[i][2] > ymin && p->pos[i][2] < ymax)
	    {
	      if(p->pos[i][3] > zmin && p->pos[i][3] < zmax)
		{
		  count++;
		  p->idsave[i] = p->id[i];
		  p->id[i] = 0;
		  xcm  += p->pos[i][1]*p->m[i];
		  ycm  += p->pos[i][2]*p->m[i];
		  zcm  += p->pos[i][3]*p->m[i];
		  vxcm += p->vel[i][1]*p->m[i];
		  vycm += p->vel[i][2]*p->m[i];
		  vzcm += p->vel[i][3]*p->m[i];
		  mtot += p->m[i];
		}
	    }
	}
    }

  xcm /= mtot;
  ycm /= mtot;
  zcm /= mtot;
  vxcm /= mtot;
  vycm /= mtot;
  vzcm /= mtot;


  printf("%g\n", mtot);

  for(i = 1; i <= p->Ntot; i++)
    {
      if(p->id[i] != 0)
	{
	  vmag = sqrt((p->vel[i][1]-vxcm)*(p->vel[i][1]-vxcm)+(p->vel[i][2]-vycm)*(p->vel[i][2]-vycm)+(p->vel[i][3]-vzcm)*(p->vel[i][3]-vzcm));
	  printf("%g %g\n", p->m[i], vmag);
	}
      
    }

  exit(13);

  return;
    
}
